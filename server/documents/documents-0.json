[
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 0-creating-container.md",
    "lang": "shell",
    "code": "docker ps"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 0-creating-container.md",
    "lang": "shell",
    "code": "docker run -it ubuntu"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 0-creating-container.md",
    "lang": "shell",
    "code": "docker run -d -p 8080:80 ngix"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 0-creating-container.md",
    "lang": "shell",
    "code": "docker rm <container_ID>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 0-creating-container.md",
    "lang": "shell",
    "code": "docker rmi <container_name>:<tag>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 0-creating-container.md",
    "lang": "shell",
    "code": "docker exec <containerID> <command>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 0-creating-container.md",
    "lang": "shell",
    "code": "docker exec -it <containerId> bash"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 0-creating-container.md",
    "lang": "Dockerfile",
    "code": "# Docker file is a text file to create customized Docker images\r\n\r\nFROM ubuntu:20.04       # FROM builds on a base image\r\n\r\nRUN /home/vinayak       # Execute command in image\r\n\r\nWORKDIR /home/vinayak   # Set a working directory of a container\r\n\r\nCOPY ./vinayak.txt ./   # Copy time files from the project to the container workdir"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 0-creating-container.md",
    "lang": "dockerfile",
    "code": "ENTRYPOINT [\"echo\", \"Hello\"]\r\nCMD [\"World\"]"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 0-creating-container.md",
    "lang": "shell",
    "code": "docker build -t <image-name> <path-to-dir-containing-Dockerfile>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 0-creating-container.md",
    "lang": "shell",
    "code": "docker build -t <image-name> -f <path-to-file>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 1-networking.md",
    "lang": "shell",
    "code": "docker network ls"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 1-networking.md",
    "lang": "shell",
    "code": "docker inspect <network-name>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 1-networking.md",
    "lang": "shell",
    "code": "docker run -it --net <networkname> <imagename>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 1-networking.md",
    "lang": "shell",
    "code": "docker run -it --net container:<container_id> <imageName>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 2-volume.md",
    "lang": "shell",
    "code": "docker run -it -v <path-to-host-dir>:<path-to-cont-dir> <image>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 2-volume.md",
    "lang": "shell",
    "code": "docker volume create <volume-name>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 2-volume.md",
    "lang": "shell",
    "code": "docker volume ls"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 2-volume.md",
    "lang": "shell",
    "code": "docker run -it -v <volume-name>:<path-to-cont-dir> <image>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 2-volume.md",
    "lang": "shell",
    "code": "docker inspect <volume-name>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 2-volume.md",
    "lang": "shell",
    "code": "docker volumn inspect <volume-name>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 3-compose.md",
    "lang": "yaml",
    "code": ""
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 3-compose.md",
    "lang": "shell",
    "code": "docker-compose up"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Docker 3-compose.md",
    "lang": "shell",
    "code": "docker-compose ps"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Flutter Login and SignUp.md",
    "lang": "shell",
    "code": "npm install -g firebase-tools"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Flutter Login and SignUp.md",
    "lang": "shell",
    "code": "dart pub global activate flutterfire_cli"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Flutter Login and SignUp.md",
    "lang": "shell",
    "code": "flutter pub add firebase_core\r\nflutter pub add firebase_auth\r\nflutter pub add firebase_ui_auth"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Flutter Login and SignUp.md",
    "lang": "dart",
    "code": "void main() async {\r\n WidgetsFlutterBinding.ensureInitialized();\r\n await Firebase.initializeApp(\r\n   options: DefaultFirebaseOptions.currentPlatform,\r\n );\r\n\r\n\r\n runApp(const MyApp());\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Git Authentication.md",
    "lang": "shell",
    "code": "git config --global user.name \"Segun Ajibola\""
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Git Authentication.md",
    "lang": "shell",
    "code": "git config --global user.email \"youremail@gmail.com\""
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Git Authentication.md",
    "lang": "shell",
    "code": "ls -al ~/.ssh"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Git Authentication.md",
    "lang": "shell",
    "code": "ssh-keygen -t ed25519 -C \"your_email@example.com\""
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Git Authentication.md",
    "lang": "",
    "code": "Get-Service -Name ssh-agent | Set-Service -StartupType Manual\r\nStart-Service ssh-agent"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Git Authentication.md",
    "lang": "shell",
    "code": "ssh-add <path to private key>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Git Authentication.md",
    "lang": "shell",
    "code": "git clone https://vinayak5002:<MYTOKEN>@github.com/vinayak5002/<repoName>.git"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Git Merge commit (rebase).md",
    "lang": "",
    "code": "git pull --rebase"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Git Merge commit (rebase).md",
    "lang": "",
    "code": "git rebase --abort"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 22-7-Lambda-Stream-Properties.md",
    "lang": "java",
    "code": "@FunctionalInterface\r\ninterface Operation{\r\n\t//Abstract Functional Method providing definition of lambda expression\r\n\tpublic double calculations(double num1,double num2); \r\n}\r\n//Defining a lambda expression of type Operation\r\nOperation doAdd  =  (double x, double y)-> x+y;"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 22-7-Lambda-Stream-Properties.md",
    "lang": "java",
    "code": "interface Operation {\r\n\tpublic double opCriteria(double firstNum, double secondNum);\r\n}\r\n\r\npublic static void main(String[] args) {\r\n\t\t\r\n\tOperation add = (x,y) -> x+y;\r\n\tOperation subtract = (x,y) -> x-y;\r\n\tOperation multiply = (x,y) -> x*y;\r\n\tOperation divide = (x,y) -> x/y;\r\n\t\t\r\n\t\r\n\tSystem.out.println(\"Result is: \"+doOperation(12, 4, multiply));\r\n}\r\n\r\npublic static double doOperation(double firstNum, double secondNum, Operation operator) {\r\n\treturn operator.opCriteria(firstNum, secondNum);\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 22-7-Lambda-Stream-Properties.md",
    "lang": "java",
    "code": "List<String> strArr = List.of(\"Tyson\", \"Kai\", \"Max\", \"Ray\", \"Daichi\");//List.of() returns immutable list of String with mentioned values\r\nstrArr.forEach(s -> System.out.println(s));                           //Printing List Using Lambda Expression\r\n\r\nstrArr.forEach(System.out::println); // Consice"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 22-7-Lambda-Stream-Properties.md",
    "lang": "java",
    "code": "List<String> castList = List.of(\"Sam\",\"Dean\",\"Castiel\",\"Crowley\");\r\nStream<String> supernatural = castList.stream();"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 22-7-Lambda-Stream-Properties.md",
    "lang": "java",
    "code": "Integer[] array = {672, 340, 999};\r\nStream<Integer> stream = Arrays.stream(array);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 22-7-Lambda-Stream-Properties.md",
    "lang": "java",
    "code": "Stream<Integer> stream = Stream.of(672, 340, 999);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 22-7-Lambda-Stream-Properties.md",
    "lang": "",
    "code": "USERNAME=vizz\r\nPASSWORD=root\r\nSERVER_URL=https://localhost:5002/\r\nLOGIN_SUCCESS=Successfully logged in!"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 22-7-Lambda-Stream-Properties.md",
    "lang": "java",
    "code": "Configurations configurations = new Configurations();\r\nPropertiesConfiguration config = configurations.properties(\"configuration.properties\");"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 22-7-Lambda-Stream-Properties.md",
    "lang": "java",
    "code": "Iterator<String> keys = proConfig.getKeys();\r\n\r\nwhile(keys.hasNext()) {\r\n\tsout(proConfig.getProperty(keys.next()));\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 22-7-Lambda-Stream-Properties.md",
    "lang": "",
    "code": "#Name of the properties file\r\nname=LoggerConfigFile\r\n\r\n#Declaring logger\r\nrootLogger.level=info\r\nrootLogger.appenderRef.file.ref=LoggerAppender\r\n\r\n#File Appender\r\nappender.file.name=LoggerAppender\r\nappender.file.type=File\r\nappender.file.fileName=log/ErrorLog.log\r\n\r\n#Loggin pattern (Layout)\r\nappender.file.layout.type=PatternLayout\r\nappender.file.layout.pattern=%d{dd-MM-yyyy HH:mm:ss} %level - %m%n"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 22-7-Lambda-Stream-Properties.md",
    "lang": "java",
    "code": "import org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n\r\npublic class UserAuthentication {\t\r\n\tLog logger = LogFactory.getLog(UserAuthentication.class);\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 22-7-Lambda-Stream-Properties.md",
    "lang": "java",
    "code": "import org.apache.logging.log4j.LogManager;\r\nimport org.apache.logging.log4j.Logger;\r\n\r\npublic class App {\r\n\tprotected static final Logger logger = LogManager.getLogger();\r\n\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 23-7-Junit-Lombox-Threads.md",
    "lang": "xml",
    "code": "<dependency>\r\n    <groupId>org.projectlombok</groupId>\r\n    <artifactId>lombok</artifactId>\r\n    <version>1.18.28</version>\r\n    <scope>provided</scope>\r\n</dependency>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 23-7-Junit-Lombox-Threads.md",
    "lang": "java",
    "code": "class MyThread extends Thread {\r\n\t\r\n\t@Override\r\n\tpublic void run() {\r\n\t\tSystem.out.println(\"Thread created\");\r\n\t}\r\n\t\r\n}\r\n\r\npublic class MultiThreading {\r\n\r\n\tpublic static void main(String[] args ) {\r\n\t\tThread t = new MyThread();\r\n\t\t\r\n\t\tt.start();\r\n\t}\r\n\t\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 23-7-Junit-Lombox-Threads.md",
    "lang": "java",
    "code": "class MyThread implements Runnable {\r\n\t@Override\r\n\tpublic void run() {\r\n\t\tSystem.out.println(\"Thread created\");\r\n\t}\r\n}\r\n\r\npublic class MultiThreading {\r\n\tpublic static void main(String[] args ) {\r\n\t\tRunnable t = new MyThread();\r\n\t\tt.run();\r\n\t}\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 23-7-Junit-Lombox-Threads.md",
    "lang": "java",
    "code": "Runnable t = () -> {System.out.println(\"Thread created\");};\r\nt.run();"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 23-7-Junit-Lombox-Threads.md",
    "lang": "java",
    "code": "Runnable t = () -> {System.out.println(\"Thread created\");};\r\n\r\nThread t = new Thread(t);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 23-7-Junit-Lombox-Threads.md",
    "lang": "java",
    "code": "synchronized(sync_object)\r\n{\r\n   // Access shared variables and other\r\n   // shared resources\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 23-7-Junit-Lombox-Threads.md",
    "lang": "java",
    "code": "package com.infy.thread;\r\npublic class ThreadGroupDemo {\r\n\tpublic static void main(String[] args) {\r\n\t\tThreadGroup threadGroup = new ThreadGroup(\"ThreadGroup\");\r\n\t\tRunnable r = () -> System.out.println(\"Thread created is :\"+Thread.currentThread().getName());\r\n\t\tvar t1 = new Thread(threadGroup,r,\"one\");\r\n\t\tvar t2 = new Thread(threadGroup,r,\"two\");\r\n\t\tvar t3 = new Thread(threadGroup,r,\"three\");\r\n\t\tt1.start();\r\n\t\tt2.start();\r\n\t\tt3.start();\r\n\t\tSystem.out.println(\"Thread Group Name: \"+threadGroup.getName());\r\n\t\tthreadGroup.list();\r\n\t}\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 23-7-Junit-Lombox-Threads.md",
    "lang": "java",
    "code": "public static void main(String[] args) \r\n    { \r\n        // creates five tasks \r\n        Runnable r1 = new Task(\"task 1\"); \r\n        Runnable r2 = new Task(\"task 2\"); \r\n        Runnable r3 = new Task(\"task 3\"); \r\n        Runnable r4 = new Task(\"task 4\"); \r\n        Runnable r5 = new Task(\"task 5\");       \r\n          \r\n        // creates a thread pool with MAX_T no. of  \r\n        // threads as the fixed pool size(Step 2) \r\n        ExecutorService pool = Executors.newFixedThreadPool(MAX_T);   \r\n         \r\n        // passes the Task objects to the pool to execute (Step 3) \r\n        pool.execute(r1); \r\n        pool.execute(r2); \r\n        pool.execute(r3); \r\n        pool.execute(r4); \r\n        pool.execute(r5);  \r\n          \r\n        // pool shutdown ( Step 4) \r\n        pool.shutdown();     \r\n    }"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 23-7-Junit-Lombox-Threads.md",
    "lang": "java",
    "code": "public class FutureExample {\r\n    public static void main(String[] args) throws InterruptedException, ExecutionException {\r\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\r\n        \r\n        // Submit a task and obtain a Future object\r\n        Future<String> future = executorService.submit(() -> {\r\n            Thread.sleep(2000);\r\n            return \"Hello, Future!\";\r\n        });\r\n        \r\n        // Perform other tasks while the computation is in progress\r\n        \r\n        // Wait for the result and retrieve it\r\n        String result = future.get();\r\n        System.out.println(result);\r\n        \r\n        // Shutdown the executor service\r\n        executorService.shutdown();\r\n    }\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 23-7-Junit-Lombox-Threads.md",
    "lang": "java",
    "code": "ExecutorService executorService = Executors.newSingleThreadExecutor();\r\n\r\nSet<Callable<String>> callables = new HashSet<Callable<String>>();\r\n\r\ncallables.add(new Callable<String>() {\r\n    public String call() throws Exception {\r\n        return \"Task 1\";\r\n    }\r\n});\r\ncallables.add(new Callable<String>() {\r\n    public String call() throws Exception {\r\n        return \"Task 2\";\r\n    }\r\n});\r\ncallables.add(new Callable<String>() {\r\n    public String call() throws Exception {\r\n        return \"Task 3\";\r\n    }\r\n});\r\n\r\nString result = executorService.invokeAny(callables);\r\n\r\nSystem.out.println(\"result = \" + result);\r\n\r\nexecutorService.shutdown();"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 23-7-Junit-Lombox-Threads.md",
    "lang": "java",
    "code": "ExecutorService executorService = Executors.newSingleThreadExecutor();\r\n\r\nSet<Callable<String>> callables = new HashSet<>();\r\n\r\ncallables.add(new Callable<String>() {\r\n    public String call() throws Exception {\r\n        return \"Task 1\";\r\n    }\r\n});\r\ncallables.add(new Callable<String>() {\r\n    public String call() throws Exception {\r\n        return \"Task 2\";\r\n    }\r\n});\r\ncallables.add(new Callable<String>() {\r\n    public String call() throws Exception {\r\n        return \"Task 3\";\r\n    }\r\n});\r\n\r\nList<Future<String>> futures = executorService.invokeAll(callables);\r\n\r\nfor (Future<String> future : futures) {\r\n    System.out.println(\"future.get = \" + future.get());\r\n}\r\n\r\nexecutorService.shutdown();"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 24-7-JDBC.md",
    "lang": "java",
    "code": "static final String JDBC_DRIVER = \"com.mysql.cj.jdbc.Driver\";\r\n\r\n//Load driver class\r\nClass.forName(JDBC_DRIVER);\r\n\r\n//Create connection\r\nstatic final String DB_URL = \"jdbc:mysql://localhost:3306/jdbc_demo\";\r\nstatic final String USER = \"root\";\r\nstatic final String PASS = \"infy\";\r\nConnection connection = null;\r\nconnection = DriverManager.getConnection(DB_URL, USER, PASS);\r\n\r\n//Create Statement\r\nStatement statement = connection.createStatement();\r\n\r\n//Execute statement\r\nString sql = \"select * from employee\";\r\n\r\nResultSet resultSet = statement.executeQuery(sql);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Beyond-Basics 24-7-JDBC.md",
    "lang": "java",
    "code": "ResultSet resultSet = statement.executeQuery(sql);\r\n\r\n\r\nwhile(resultSet.hasNext()) {\r\n\tString id = resultSet.getInt(1);\r\n\tString Name  = resultSet.getString(2);\r\n\tString param3 = result.getInt(3);\r\n\t\r\n\tsout(...);\r\n\tresultSet.next();\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Essentials 17-7-Basics-Switch-Strings.md",
    "lang": "java",
    "code": "class Vehicle {}\t//( is-a relationship )\r\nclass Wheel {}\t\t//( has-a relationship)\r\nclass Petrol {}\t\t//( uses-a relationship)\r\n\r\nclass Car extends Vehicle {\r\n\tWheel wheel = new Wheel();\r\n\r\n\tvoid method2(Petrol petrol) {\r\n\t\t\r\n\t}\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Essentials 17-7-Basics-Switch-Strings.md",
    "lang": "java",
    "code": "int programmingLanguage = 1;\r\nString languageName = switch (programmingLanguage) {\r\n   case 1 -> “Java”;\r\n   //…\r\n};"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Essentials 17-7-Basics-Switch-Strings.md",
    "lang": "java",
    "code": "int programmingLanguage = 1;\r\nString languageName;\r\nswitch (programmingLanguage) {\r\n   case 1:\r\n      languageName  = \"Java\";\r\n      break;\r\n   case 2:\r\n      //...\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Essentials 17-7-Basics-Switch-Strings.md",
    "lang": "java",
    "code": "StringBuilder name = new StringBuilder();\r\nname.append(\"Oliver\");\r\nname.append(\" Carter\");\r\nSystem.out.println(name);   //Output: Oliver Carter"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Essentials 17-7-Basics-Switch-Strings.md",
    "lang": "java",
    "code": "for (int[] arr : array) {\r\n\tfor (int ele : arr) {\r\n\t\tsout(ele + \" \");\t\r\n\t}\r\n\tsout(\"\\n\");\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Essentials 17-7-Basics-Switch-Strings.md",
    "lang": "java",
    "code": "enum PizzaSize {\r\n    SMALL, MEDIUM, LARGE;\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Essentials 19-7-Exceptions-Collections.md",
    "lang": "java",
    "code": "try {\r\n    // Code that can throw exceptions\r\n}\r\ncatch(Exception1 exception1) {\r\n    // Code for handling Exception1\r\n}\r\ncatch(Exception2 exception2) {\r\n    // Code for handling Exception2\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Essentials 19-7-Exceptions-Collections.md",
    "lang": "java",
    "code": "public static void checkStock(int stockAvailable, int quantityRequired) {\r\n    try {      \r\n        if(stockAvailable < quantityRequired)\r\n            throw new Exception(\"There is not enough stock available.\");\r\n        System.out.println(\"Please proceed to the check-out\");   \r\n    }\r\n    catch(Exception e) {\r\n        System.out.println(e.getMessage());\r\n    }\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Essentials 19-7-Exceptions-Collections.md",
    "lang": "java",
    "code": "class SampleResource implements AutoCloseable {\r\n      public String name;\r\n      public SampleResource(String name) {\r\n            this.name = name;\r\n      }\r\n      @Override\r\n      public void close() throws IOException {\r\n            System.out.println(\"Closing resource : \" + name);\r\n      }\r\n}\r\npublic class Testers {\r\n      public static void main(String[] args) throws IOException {\r\n            try (SampleResourceresource = new SampleResource(\"Sample Resource\")) {\r\n                  System.out.println(\"Started Using resource : \" + resource.name);\r\n            } catch (IOException e) {\r\n                  System.out.println(e.getMessage());\r\n            }\r\n      }\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Essentials 19-7-Exceptions-Collections.md",
    "lang": "java",
    "code": "ListIterator<String> literator = nameList.listIterator();\r\n\t\t\r\n//iterating in forward direction\r\nwhile(literator.hasNext()) {\r\n\tSystem.out.println(literator.next());\r\n}\t\t\t\r\n//iterating in reverse direction\r\nwhile(literator.hasPrevious()) {\r\n\tSystem.out.println(literator.previous());\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Java Java-Essentials 19-7-Exceptions-Collections.md",
    "lang": "java",
    "code": "class Sortbyroll implements Comparator<Student> {\r\n \r\n    // Method\r\n    // Sorting in ascending order of roll number\r\n    public int compare(Student a, Student b)\r\n    {\r\n \r\n        return a.rollno - b.rollno;\r\n    }\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records JS Numbers.md",
    "lang": "js",
    "code": "const lotsOfDecimal = 1.766584958675746364;\r\nlotsOfDecimal;\r\nconst twoDecimalPlaces = lotsOfDecimal.toFixed(2);\r\ntwoDecimalPlaces; // 1.77"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records JS Numbers.md",
    "lang": "js",
    "code": "let myNumber = \"51\";\r\nmyNumber = Number(myNumber) + 1; // 52"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities 0.md",
    "lang": "shell",
    "code": "kubectl version"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities 0.md",
    "lang": "shell",
    "code": "kubectl get nodes"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities 0.md",
    "lang": "shell",
    "code": "kubectl get nodes -o wide"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities 0.md",
    "lang": "shell",
    "code": "kubectl get pods"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities 0.md",
    "lang": "shell",
    "code": "kubectl get pods -o wide"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities 0.md",
    "lang": "shell",
    "code": "kubectl run <pod-name> --image <image-name>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities 0.md",
    "lang": "shell",
    "code": "kubectl describe pod <pod-name>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities 0.md",
    "lang": "shell",
    "code": "kubectl delete pod <pod-name>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities 0.md",
    "lang": "yaml",
    "code": "apiVersion: v1\r\n\r\nkind: Pod\r\n\r\nmetaData: \r\n    name: <pod-name>\r\n\r\nspec:\r\n    containers:\r\n    - name: <container-name>\r\n      image : <image-name>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities 0.md",
    "lang": "yaml",
    "code": "containers:\r\n    - name: <container-name>\r\n      image: <image-name>\r\n      command:\r\n      - \"/bin/bash\"\r\n      - \"-c\"\r\n      - \"sleep 1000\""
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities 0.md",
    "lang": "shell",
    "code": "kubectl create -f <filename>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities 0.md",
    "lang": "shell",
    "code": "kubectl create <path-dir>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities 0.md",
    "lang": "shell",
    "code": "kubectl apply -f <filename>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities 0.md",
    "lang": "shell",
    "code": "kubectl apply <path-dir>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities 0.md",
    "lang": "shell",
    "code": "kubectl exect -it -c <container-name> <pod-name> <command>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities 0.md",
    "lang": "shell",
    "code": "kubectl label pod <pod-name> <key>=<value>..."
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities 0.md",
    "lang": "shell",
    "code": "kubectl get pods -l <label-key>=<label-value>\r\n\r\nkubectl get pods -l <label-key> # Any value of key\r\n\r\nkubectl get pods -l <label-key>!=<label-value> # Negation\r\n\r\nkubectl get pods -l <label-key>=<label-value>,<label-key>=<label-value>  # Both labels should match\r\n\r\nkubectl get pods -l '<label-key> in (<label-value>,<label-value>)'  # Matched both the labels"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities 0.md",
    "lang": "yaml",
    "code": "metadata:\r\n  name: my-second-pod\r\n  labels:\r\n    team: development\r\n    proj: webapp"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities setup-commands.md",
    "lang": "shell",
    "code": "systemctl status docker"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities setup-commands.md",
    "lang": "shell",
    "code": "systemctl start docker\r\nsystemctl enable docker"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities setup-commands.md",
    "lang": "shell",
    "code": "kubeadm reset --force"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities setup-commands.md",
    "lang": "shell",
    "code": "conntrack-tools-1.4.4-5.el7_7.2.x86_64.rpm\r\nkubectl-1.16.2-0.x86_64.rpm\r\nlibnetfilter_cthelper-1.0.0-10.el7_7.1.x86_64.rpm \r\nsocat-1.7.3.2-2.el7.x86_64.rpm\r\ncri-tools-1.13.0-0.x86_64.rpm\r\nkubelet-1.16.2-0.x86_64.rpm\r\nlibnetfilter_cttimeout-1.0.0-6.el7_7.1.x86_64.rpm\r\nkubeadm-1.16.2-0.x86_64.rpm\r\nkubernetes-cni-0.7.5-0.x86_64.rpm\r\nlibnetfilter_queue-1.0.2-2.el7_2.x86_64.rpm"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities setup-commands.md",
    "lang": "shell",
    "code": "swapoff -a\r\nsystemctl start kubelet\r\nsystemctl enable kubelet\r\nsystemctl status kubelet"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities setup-commands.md",
    "lang": "shell",
    "code": "kubeadm reset --force"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities setup-commands.md",
    "lang": "shell",
    "code": "kubeadm init --pod-network-cidr=10.244.0.0/16 --kubernetes-version=1.16.2 --ignore-preflight-errors=NumCPU | tee k8s-install.log"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities setup-commands.md",
    "lang": "shell",
    "code": "mkdir -p $HOME/.kube\r\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\r\nsudo chown $(id -u):$(id -g) $HOME/.kube/config"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities setup-commands.md",
    "lang": "shell",
    "code": "kubeadm join 172.20.188.185:6443 --token tlzp2m.d52ktq4kiwl1byxy --discovery-token-ca-cert-hash sha256:38d6b42e076b3f2ef1a3764ceda4649ef7ed5c85330e34e29d2589f9e902be1b"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities setup-commands.md",
    "lang": "shell",
    "code": ""
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities setup-commands.md",
    "lang": "shell",
    "code": "systemctl start docker\r\nsystemctl enable docker\r\nsystemctl status docker"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Kubernities setup-commands.md",
    "lang": "shell",
    "code": "swapoff -a\r\nsystemctl start kubelet\r\nsystemctl enable kubelet\r\nsystemctl status kubelet"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Rust 1.Hello world.md",
    "lang": "rust",
    "code": "fn main() {\r\n\tprintln!(\"Hello world\")\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Rust 2.Cargo.md",
    "lang": "shell",
    "code": "cargo new <project name>\r\ncargo build\r\ncargo run\r\ncargo check\r\ncargo build --release\r\ncargo build #initializing project"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Rust 2.Cargo.md",
    "lang": "",
    "code": "cargo new <project name>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Rust 2.Cargo.md",
    "lang": "",
    "code": "cargo build"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Rust 3.Variables.md",
    "lang": "rust",
    "code": "const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Rust 4.Data Types.md",
    "lang": "rust",
    "code": "fn main() {\r\n    let c = 'z';\r\n    let z: char = 'ℤ'; // with explicit type annotation\r\n    let heart_eyed_cat = '😻';\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Rust 4.Data Types.md",
    "lang": "rust",
    "code": "let tup: (i32, f64, u8) = (500, 6.4, 1);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Rust 4.Data Types.md",
    "lang": "rust",
    "code": "let (x, y, z) = tup;"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Rust 4.Data Types.md",
    "lang": "rust",
    "code": "let first = tup.0;\r\nlet second = tup.1;"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Rust 5.Functions.md",
    "lang": "rust",
    "code": "fn another_function(x: i32) {}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Rust 5.Functions.md",
    "lang": "rust",
    "code": "fn five() -> i32 {\r\n\t5\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring API validation.md",
    "lang": "xml",
    "code": "<dependency>\r\n   <groupId>org.springframework.boot</groupId>\r\n   <artifactId>spring-boot-starter-validation</artifactId>\r\n</dependency>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring API validation.md",
    "lang": "java",
    "code": "public class CustomerDTO {   \r\n    private Integer customerId;\r\n\t\r\n    @Email(message = \"{customer.emailid.invalid}\")\r\n    @NotNull(message = \"{customer.emailid.absent}\") \r\n    private String emailId;\r\n\t\r\n    @NotNull(message = \"{customer.name.absent}\")\r\n    @Pattern(regexp=\"[A-Za-z]+( [A-Za-z]+)*\", message=\"{customer.name.invalid}\")\r\n\tprivate String name;\r\n    \r\n    @PastOrPresent(message = \"customer.dob.invalid\")\r\n\tprivate LocalDate dateOfBirth;\r\n    //getter and setter\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring API validation.md",
    "lang": "",
    "code": "customer.emailid.absent=Please provide email address\r\ncustomer.emailid.invalid=Please provide valid email address\r\ncustomer.name.absent=Please provide customer name\r\ncustomer.name.invalid=Name should contain only alphabets and space\r\ncustomer.dob.invalid=Date of birth should be past or present date"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring API validation.md",
    "lang": "java",
    "code": "@PostMapping(value = \"/customers\")\r\npublic ResponseEntity<String> addCustomer(@Valid @RequestBody CustomerDTO customerDTO) throws InfyBankException  {\r\n   //rest of the code\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring configuration.md",
    "lang": "xml",
    "code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\t<parent>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t\t<version>3.1.4</version>\r\n\t\t<relativePath /> <!-- lookup parent from repository -->\r\n\t</parent>\r\n\t<groupId>com.infy</groupId>\r\n\t<artifactId>OrderMS</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<name>OrderMS</name>\r\n\t<description>Demo project for Spring Boot</description>\r\n\t<properties>\r\n\t\t<java.version>21</java.version>\r\n\t\t<spring-cloud.version>2022.0.4</spring-cloud.version>\r\n\t</properties>\r\n\t<dependencyManagement>\r\n\t\t<dependencies>\r\n\t\t\t<dependency>\r\n\t\t\t\t<groupId>org.springframework.cloud</groupId>\r\n\t\t\t\t<artifactId>spring-cloud-dependencies</artifactId>\r\n\t\t\t\t<version>${spring-cloud.version}</version>\r\n\t\t\t\t<type>pom</type>\r\n\t\t\t\t<scope>import</scope>\r\n\t\t\t</dependency>\r\n\t\t</dependencies>\r\n\t</dependencyManagement>\r\n\r\n\t<dependencies>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-actuator</artifactId>\r\n\t\t\t<exclusions>\r\n\t\t\t\t<exclusion>\r\n\t\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t\t<artifactId>spring-boot-starter-logging</artifactId>\r\n\t\t\t\t</exclusion>\r\n\t\t\t</exclusions>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\r\n\t\t\t<exclusions>\r\n\t\t\t\t<exclusion>\r\n\t\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t\t<artifactId>spring-boot-starter-logging</artifactId>\r\n\t\t\t\t</exclusion>\r\n\t\t\t</exclusions>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-log4j2</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.cloud</groupId>\r\n\t\t\t<artifactId>spring-cloud-starter-consul-discovery</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.github.resilience4j</groupId>\r\n\t\t\t<artifactId>resilience4j-spring-boot2</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.cloud</groupId>\r\n\t\t\t<artifactId>spring-cloud-starter-loadbalancer</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-devtools</artifactId>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t\t<optional>true</optional>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-aop</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-validation</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>mysql</groupId>\r\n\t\t\t<artifactId>mysql-connector-java</artifactId>\r\n\t\t\t<version>8.0.33</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t        <groupId>org.springframework.boot</groupId>\r\n\t        <artifactId>spring-boot-starter-webflux</artifactId>\r\n\t   </dependency> \r\n\t</dependencies>\r\n\r\n</project>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring configuration.md",
    "lang": "yml",
    "code": "#Add the server port as mentioned in the QP\r\n\r\n#Please provide the Username and Password for the Datasource mentioned below. \r\nspring:\r\n  datasource:\r\n    driverClassName: com.mysql.cj.jdbc.Driver\r\n    url: jdbc:mysql://localhost/order_db\r\n    userName: root\r\n    password: root\r\n  jpa:\r\n   hibernate.ddl-auto: update\r\n\r\n  application:\r\n    name: OrderMS\r\n  cloud:\r\n    consul:\r\n      host: localhost\r\n      discovery:\r\n        hostname: localhost\r\n      config:\r\n        fail-fast: false\r\n        enabled: true\r\n        prefix: config\r\n        defaultContext: application\r\n        data-key: data\r\n        profileSeparator: '::'\r\n        format: YAML\r\n  \r\n  \r\nserver:\r\n  port: 8003\r\n#Kindly provide spring microservices properties like application name, cloud consul host name and service discovery\r\n\r\n#Kindly add resilience property as mentioned in the QP Document.\r\n\r\nGeneral:\r\n  EXCEPTION_MESSAGE: Request could not be processed due to some issue. Please try again!\r\n\r\nOrderService:\r\n  INVALID_MEDICINE_NAME: Sorry!! Order details not found. Please provide valid medicine name.\r\n  INVALID_ORDER_ID: Sorry!! Order details not found. Please provide valid Order Id.\r\n\r\nOrderAPI:\r\n  ORDER_PLACED_SUCCESS: Congratulations! Your order has been placed with Order Id"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Persistence layer 29-7-persistence-layer.md",
    "lang": "java",
    "code": "public interface CustomerRepository extends CRUDRepository<T, ID> {\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Persistence layer 29-7-persistence-layer.md",
    "lang": "xml",
    "code": "<dependency>\r\n  <groupId>org.modelmapper</groupId>\r\n  <artifactId>modelmapper</artifactId>\r\n  <version>3.0.0</version>\r\n</dependency>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Persistence layer 29-7-persistence-layer.md",
    "lang": "java",
    "code": "ModelMapper mapper = new ModelMaper();\r\nCustomerDTO customerDto = mapper.map(customer, CustomreDTO.class);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Persistence layer 30-7-JPQL.md",
    "lang": "java",
    "code": "@Query(\"SELECT c FROM Customer c WHERE c.emailId = :emailId AND c.name = :name\")\r\nString findNameByEmailId(@Param(\"emailId\") String emailId, String name);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Persistence layer 30-7-JPQL.md",
    "lang": "java",
    "code": "@Query(\"SELECT c FROM Customer c WHERE c.emailId = ?1\")\r\nString findNameByEmailId(String emailId);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Persistence layer 30-7-JPQL.md",
    "lang": "java",
    "code": "@Query(\"UPDATE Customer c SET c.emailId = :emailId WHERE c.customerId = :customerId\")\r\n@Modifying\r\n@Transactional\r\nInteger updateCustomerEmailId(@Param(\"emailId\") String updateCustomerByEmailId, @Param(\"customerId\") Integer customerId);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Persistence layer 30-7-JPQL.md",
    "lang": "java",
    "code": "@Entity\r\n@Table(name=\"customer\")\r\n@NamedQuery(name=\"Customer.findNameByEmailId\", query=\"SELECT c.name FROM Customer c WHERE c.emailId = :emailId\")\r\npublic class Customer {\r\n\t@Id\r\n\tprivate Integer customerId;\r\n\tprivate String emailId;\r\n\tprivate String name;\r\n\tprivate LocalDate dateOfBirth;\r\n\t@Enumerated(value=EnumType.STRING)\r\n\tprivate CustomerType customerType;\r\n    // getter and setter methods\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Persistence layer 30-7-JPQL.md",
    "lang": "java",
    "code": "public interface CustomerRespository extends CrudRepository<Customer, Integer>{\r\n\tString findNameByEmailId(@Param(\"emailId\") String emailId); \r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Persistence layer 30-7-JPQL.md",
    "lang": "",
    "code": "@Query(\"UPDATE Customer c SET c.emailId = :emailId WHERE c.customerName = :name\")\r\n@Modifying\r\n@Transcational\r\npublic void updateCustomerEmailIdByName(@Param(emailId) String email, String name);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Persistence layer 30-7-JPQL.md",
    "lang": "java",
    "code": "Pageable pageable = PageRequest.of(pageNo, pageSize);\r\n\r\nPage<Entity> page = repo.findAll(pageRequest);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Persistence layer 30-7-JPQL.md",
    "lang": "java",
    "code": "LocalDate transactionDate = LocalDate.of(1996, 1, 29);\r\n\r\nSort sort = Sort.by(\"transactionDate\");\r\n\r\nPageable pageable = PageRequest.of(0,2,sort);\r\n\r\nList<Transaction> transactionList = transactionRepository.findByTransactionDateAfter(transactionDate, pageable);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Persistence layer 31-7-keyGen-relationships.md",
    "lang": "sql",
    "code": "CREATE TABLE customer (\r\n\tcustomer_id int AUTO_INCREMENT,\r\n\temail_id varchar(20),\r\n\tname varchar(10),\r\n\tdate_of_birth date,\r\n\tconstraint ps_customer_id_pk primary key (customer_id)\r\n);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Persistence layer 31-7-keyGen-relationships.md",
    "lang": "java",
    "code": "@Entity\r\npublic class Customer{\r\n\t@Id\r\n\t@GeneratedValue(strategy=GenerationType.IDENTITY)\r\n\tprivate Integer customerId;\r\n\t\r\n    // rest of the code\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Persistence layer 31-7-keyGen-relationships.md",
    "lang": "sql",
    "code": "create table address(\r\n\taddress_id int ,\r\n\tstreet varchar(30) not null,\r\n\tcity varchar(10) not null,\r\n\tconstraint ps_addressid_pk primary key (address_id)\r\n);\r\n\r\ncreate table customer (\r\n\tcustomer_id int auto_increment,\r\n\taddress_id int unique,\r\n\temailid varchar(25) not null,\r\n\tname varchar(10) not null,\r\n\tdate_of_birth date not null,\r\n\tconstraint ps_customerid_pk primary key (customer_id),\r\n\tconstraint ps_customer_address_fk foreign key(address_id) references address(address_id)\r\n);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Persistence layer 31-7-keyGen-relationships.md",
    "lang": "java",
    "code": "@Entity\r\npublic class Customer {\r\n\t@Id\r\n\t@GeneratedValue(strategy=GenerationType.IDENTITY)\r\n\tprivate Integer customerId;\r\n\tprivate String emailId;\r\n\tprivate String name;\r\n\tprivate LocalDate dateOfBirth;\r\n\t@OneToOne(cascade = CascadeType.ALL)\r\n\t@JoinColumn(name = \"address_id\", unique = true)\r\n\tprivate Address address;\r\n\t//getter and setter\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Service layer 25-7-Spring.md",
    "lang": "xml",
    "code": "<dependency>\r\n\t<groupId>org.springframework</groupId>\r\n\t<artifactId>spring-context</artifactId>\r\n\t<version>6.1.11</version>\r\n</dependency>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Service layer 25-7-Spring.md",
    "lang": "java",
    "code": "@Configuration\r\npublic class SpringConf{\r\n\t\r\n\t@Bean\r\n\tpublic CusotmerLoginRepository customerLoginRepository() {\r\n\t\treturn new CustomreLoginRespositoryImpl();\r\n\t}\r\n\r\n\t@Bean(name=\"customerService\")\r\n\tpublic CustomLoginService customerLoginService() {\r\n\t\treturn new CustomLoginServiceImpl(customerLoginRepository());\r\n\t}\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Service layer 25-7-Spring.md",
    "lang": "java",
    "code": "public class CustomerLoginController {\r\n\r\n\tCustomerLoginService customerLoginService;\r\n\r\n\tpsvm() {\r\n\t\tApplicationContext context = new AnnotationConfigApplicationContext(SpringConf.class);\r\n\t\t\r\n\t\tcustomerLoginService = context.getBean(CustomerLoginServiceImple.class);\r\n\r\n\t\t//Getting bean using custom name\r\n\t\tcustomerLoginService = (CustomerLoginServiceImpl) context.getBean(\"customerService\");\r\n\t}\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Service layer 25-7-Spring.md",
    "lang": "java",
    "code": "@Configuration\r\n@ComponentScan(basePackages=\"com.infy.repository com.infy.service com.infy.controller\")\r\npublic class SpringConf{\r\n\t\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Service layer 25-7-Spring.md",
    "lang": "java",
    "code": "public class CustomerLoginController {\r\n\r\n\tCustomerLoginService customerLoginService;\r\n\r\n\tpsvm() {\r\n\t\tApplicationContext context = new AnnotationConfigApplicationContext(SpringConf.class);\r\n\t\t\r\n\t\tcustomerLoginService = context.getBean(CustomerLoginServiceImple.class);\r\n\r\n\t\t//Getting bean using custom name\r\n\t\tcustomerLoginService = (CustomerLoginServiceImpl) context.getBean(\"customerService\");\r\n\t}\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Service layer 25-7-Spring.md",
    "lang": "java",
    "code": "ApplicationContext context = new AnnotationConfigApplicationContext(SpringConf.class);\r\n\r\nEnvironment environment = context.getEnvironment()\r\n\r\nenvironment.getProperty(\"some.proprety\");"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Service layer 26-7-SpringBoot.md",
    "lang": "java",
    "code": "package com.infy;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n@SpringBootApplication\r\npublic class DemoSpringBootApplication  {\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(DemoSpringBootApplication.class, args);\r\n\t}\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Service layer 26-7-SpringBoot.md",
    "lang": "java",
    "code": "import org.apache.logging.log4j.LogManager;\r\nimport org.apache.logging.log4j.Logger;\r\n\r\nprivate static final Logger LOGGER = LogManager.getLogger(<main_class>.class);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Service layer 26-7-SpringBoot.md",
    "lang": "xml",
    "code": "<dependency>\r\n\t<groupId>org.springframework.boot</groupId>\r\n\t<artifactId>spring-boot-starter-log4j2</artifactId>\r\n</dependency>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Service layer 26-7-SpringBoot.md",
    "lang": "xml",
    "code": "<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-aop</artifactId>\r\n</dependency>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Service layer 26-7-SpringBoot.md",
    "lang": "xml",
    "code": "<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter</artifactId>\r\n\t\t\t<exclusions>\r\n\t\t\t\t<exclusion>\r\n\t\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t\t<artifactId>spring-boot-starter-logging</artifactId>\r\n\t\t\t\t</exclusion>\r\n\t\t\t</exclusions>\r\n\t\t</dependency>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Service layer 26-7-SpringBoot.md",
    "lang": "java",
    "code": "package com.infy.utility;\r\n\r\nimport org.apache.logging.log4j.LogManager;\r\nimport org.apache.logging.log4j.Logger;\r\nimport org.aspectj.lang.annotation.AfterThrowing;\r\nimport org.aspectj.lang.annotation.Aspect;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport com.infy.exception.OrderException;\r\n\r\n@Aspect\r\n@Component\r\npublic class LoggingAspect {\r\n\r\n\tprivate static final Logger LOGGER = LogManager.getLogger(LoggingAspect.class);\r\n\r\n\t@AfterThrowing(pointcut= \"execution(* com.infy.service.OrderServiceImpl.*(..))\", throwing= \"exception\")\r\n\tpublic void logServiceException(OrderException exception) {\r\n\t\tLOGGER.error(exception.getMessage());\r\n\t}\r\n\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Utility exception-controller.md",
    "lang": "java",
    "code": "package com.infy.utility;\r\n\r\n\r\npublic class ErrorInfo {\r\n\tprivate String errorMessage;\r\n\tprivate Integer errorCode;\r\n\r\n\t\r\n\tpublic String getErrorMessage() {\r\n\t\treturn errorMessage;\r\n\t}\r\n\r\n\tpublic void setErrorMessage(String errorMessage) {\r\n\t\tthis.errorMessage = errorMessage;\r\n\t}\r\n\r\n\tpublic Integer getErrorCode() {\r\n\t\treturn errorCode;\r\n\t}\r\n\r\n\tpublic void setErrorCode(Integer errorCode) {\r\n\t\tthis.errorCode = errorCode;\r\n\t}\r\n\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Spring Utility exception-controller.md",
    "lang": "java",
    "code": "package com.infy.utility;\r\n\r\nimport java.util.stream.Collectors;\r\n\r\nimport org.apache.logging.log4j.LogManager;\r\nimport org.apache.logging.log4j.Logger;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.core.env.Environment;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.validation.ObjectError;\r\nimport org.springframework.web.bind.MethodArgumentNotValidException;\r\nimport org.springframework.web.bind.annotation.ExceptionHandler;\r\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\r\n\r\nimport com.infy.exception.OrderException;\r\n\r\nimport jakarta.validation.ConstraintViolation;\r\nimport jakarta.validation.ConstraintViolationException;\r\n\r\n@RestControllerAdvice\r\npublic class ExceptionControllerAdvice {\r\n\r\n\tprivate static final Logger LOGGER = LogManager.getLogger(ExceptionControllerAdvice.class);\r\n\r\n\t@Autowired\r\n\tprivate Environment environment;\r\n\r\n\t@ExceptionHandler(OrderException.class)\r\n\tpublic ResponseEntity<ErrorInfo> orderExceptionHandler(OrderException exception) {\r\n\t\tLOGGER.error(exception.getMessage(), exception);\r\n\t\tErrorInfo errorInfo = new ErrorInfo();\r\n\t\terrorInfo.setErrorMessage(environment.getProperty(exception.getMessage()));\r\n\t\terrorInfo.setErrorCode(HttpStatus.BAD_REQUEST.value());\r\n\t\treturn new ResponseEntity<>(errorInfo, HttpStatus.BAD_REQUEST);\r\n\t}\r\n\r\n\t@ExceptionHandler(Exception.class)\r\n\tpublic ResponseEntity<ErrorInfo> generalExceptionHandler(Exception exception) {\r\n\t\tLOGGER.error(exception.getMessage(), exception);\r\n\t\tErrorInfo errorInfo = new ErrorInfo();\r\n\t\terrorInfo.setErrorMessage(environment.getProperty(\"General.EXCEPTION_MESSAGE\"));\r\n\t\terrorInfo.setErrorCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\r\n\t\treturn new ResponseEntity<>(errorInfo, HttpStatus.INTERNAL_SERVER_ERROR);\r\n\t}\r\n\r\n\t@ExceptionHandler({MethodArgumentNotValidException.class, ConstraintViolationException.class})\r\n\tpublic ResponseEntity<ErrorInfo> validatorExceptionHandler(Exception exception) {\r\n\t\tLOGGER.error(exception.getMessage(), exception);\r\n\t\tString errorMsg;\r\n\t\tif (exception instanceof MethodArgumentNotValidException) {\r\n\t\t\tMethodArgumentNotValidException manvException = (MethodArgumentNotValidException) exception;\r\n\t\t\terrorMsg = manvException.getBindingResult().getAllErrors().stream().map(ObjectError::getDefaultMessage)\r\n\t\t\t\t\t.collect(Collectors.joining(\", \"));\r\n\t\t} else {\r\n\t\t\tConstraintViolationException cvException = (ConstraintViolationException) exception;\r\n\t\t\terrorMsg = cvException.getConstraintViolations().stream().map(ConstraintViolation::getMessage)\r\n\t\t\t\t\t.collect(Collectors.joining(\", \"));\r\n\t\t}\r\n\t\tErrorInfo errorInfo = new ErrorInfo();\r\n\t\terrorInfo.setErrorMessage(errorMsg);\r\n\t\terrorInfo.setErrorCode(HttpStatus.BAD_REQUEST.value());\r\n\t\treturn new ResponseEntity<>(errorInfo, HttpStatus.BAD_REQUEST);\r\n\t}\r\n\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI HTML 14-8.md",
    "lang": "html",
    "code": "<form name=\"Name of the form\" action=\"Link to server-side program\" method=\"HTTP Request method\" target=\"Where to display the response\">\r\n    <!-- All the form elements will come here-->\r\n</form>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI HTML 14-8.md",
    "lang": "html",
    "code": "<input type=\"input-type\" value=\"element-value\"/>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI HTML 14-8.md",
    "lang": "html",
    "code": "<label for=\"emailId\">Email ID</label>\r\n <br>\r\n <input type=\"email\" name=\"emailId\" id=\"emailId\">"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 0.md",
    "lang": "ts",
    "code": "const [formState, setFormState] = useState<State>({\r\n    email: \"\",\r\n    password: \"\",\r\n    message: \"\",\r\n    textStyle: \"\"\r\n});\r\n\r\nsetFormState((prev) => ({...prev, message: \"Login success\", textStyle: \"success\"}));"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 0.md",
    "lang": "ts",
    "code": "setFormState((prev) => ({...prev, message: \"Login success\", textStyle: \"success\"}));\r\nsetFormState((prev) => {return {...prev, message: \"Login success\", textStyle: \"success\"}});"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 0.md",
    "lang": "tsx",
    "code": "{\r\n    array && // check for null\r\n    array.lenght > 0 && // logic of canditional rendering\r\n    array.map(() => {...}); // displaying\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 0.md",
    "lang": "ts",
    "code": "const itemsList = items; // copies reference\r\nconst itemsList = [...items] // copies values"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 0.md",
    "lang": "ts",
    "code": "// This will not work\r\nsetItems((items) => {\r\n    items[index].quantity = quantity;\r\n    return items\r\n});\r\n\r\n//Do this:\r\nconst itemsList = [...items];\r\nitemsList[index].quantity = quantity;\r\n\r\nsetItems(itemsList);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 1-.md",
    "lang": "ts",
    "code": "const HomePage = () => {\r\n    return (\r\n        <div>\r\n            HomePage\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePage;"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 1-.md",
    "lang": "ts",
    "code": "export default class Footer extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n            Footer\r\n            </>\r\n        )\r\n    }\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 1-.md",
    "lang": "ts",
    "code": "type Props = {\r\n    info: number;\r\n};\r\n\r\nconst Resultant: React.FC<Props> = (data) => {\r\n    return (<ul>\r\n        {data.info}\r\n    </ul>);\r\n};"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 1-.md",
    "lang": "ts",
    "code": "const [count, setCount] = useState(0);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 1-.md",
    "lang": "ts",
    "code": "setCount((count) => {return count + 1});"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 1-.md",
    "lang": "ts",
    "code": "const App: React.FC<Props> = ({ element1 = \"Hello\", element2 = \"World\" }) => {}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 1-.md",
    "lang": "ts",
    "code": "useEffect(()=>{\r\n    //implementation\r\n})"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 1-.md",
    "lang": "ts",
    "code": "useEffect(()=>{\r\n   //implementation\r\n},[])"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 1-.md",
    "lang": "ts",
    "code": "useEffect(()=>{\r\n   //implementation\r\n},[props,state])"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 1-.md",
    "lang": "ts",
    "code": "import React from 'react';\r\ntype Props = {\r\n  children: React.ReactNode;\r\n};\r\nconst App: React.FC<Props> = ({ children }) => {\r\n  let count = 1;\r\n  React.Children.map(children, () => {\r\n    console.log('child', count++);\r\n  });\r\n  return <ul>{children}</ul>;\r\n};\r\nexport default App;"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 1-.md",
    "lang": "ts",
    "code": "import React from 'react';\r\n...\r\nrootEle.render(\r\n  <React.StrictMode>\r\n    <App>\r\n      <li>List element</li>\r\n      <h3>Heading element</h3>\r\n      <p>Paragraph element</p>\r\n      <span>Span element</span>\r\n    </App>\r\n  </React.StrictMode>\r\n);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 1-.md",
    "lang": "",
    "code": "npm install react-router-dom"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 1-.md",
    "lang": "ts",
    "code": "import { BrowserRouter, Routes, Route, Link} from 'react-router-dom';"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 1-.md",
    "lang": "tsx",
    "code": "<BrowserRouter>\r\n        <Routes>\r\n                <Route path = \"/\" element = {<Home/>} />\r\n                <Route path = \"/home\" element = {<Home/>} />\r\n                <Route path = \"/about\" element = {<About/>} />\r\n                <Route path = \"/contact\" element = {<ContactUs/>} />\r\n        </Routes>\r\n</BrowserRouter>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 1-.md",
    "lang": "tsx",
    "code": "<nav className=\"navbar navbar-expand-lg navbar-dark bg-light\">\r\n  <Link to=\"/\"><p className=\"nav-item nav-link\">Home</p></Link> |\r\n  <Link to=\"/login\"><p className=\"nav-item nam-link\">Login</p></Link> |\r\n  <Link to=\"/search\"><p className=\"nav-item nam-link\">Search</p></Link> |\r\n</nav>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 1-.md",
    "lang": "tsx",
    "code": "<Route path=\"/\" element={<Header />}>\r\n  <Route index element={<Home />} />\r\n  <Route path=\"/home\" element={<Home />} />\r\n  <Route path=\"/about\" element={<About />} />\r\n  <Route path=\"/contact\" element={<ContactUs />} />\r\n</Route>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 1-.md",
    "lang": "tsx",
    "code": "<BrowserRouter>\r\n    <Routes>\r\n      <Route path=\"/\" element={<Login/>} />\r\n      <Route path=\"/landing/:name/*\" element={<Landing/>}/>\r\n    </Routes>\r\n  </BrowserRouter>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 1-.md",
    "lang": "tsx",
    "code": "let params = useParams<interfacename>(); // Create a new type/interface to recive the path variables\r\nparams.name;"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 1-.md",
    "lang": "tsx",
    "code": "<Route path=\"*\" element={<NotFound/>} />"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 1-.md",
    "lang": "ts",
    "code": "let navigate = useNavigate();\r\n...\r\nnavigate(`/landing/${name}`);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 2.md",
    "lang": "ts",
    "code": "npm install axios"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 2.md",
    "lang": "ts",
    "code": "axios.get<YourDataType>('url')\r\n    .then((result: AxiosResponse<YourDataType>) => {\r\n    console.log(result.data);\r\n    // Handle the data here\r\n    })\r\n    .catch((error) => {\r\n    console.error(error);\r\n    // Handle errors here\r\n    });"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 2.md",
    "lang": "ts",
    "code": "axios.post<ResponseData>('url', requestData)\r\n    .then((result: AxiosResponse<ResponseData>) => {\r\n    console.log(result.data);\r\n    // Handle the data here\r\n    })\r\n    .catch((error) => {\r\n    console.error(error);\r\n    // Handle errors here\r\n    });"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 2.md",
    "lang": "ts",
    "code": "const [state, setState] = useState({ username: \"\", password: \"\" });"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 2.md",
    "lang": "ts",
    "code": "const setFormState = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const {name, value} = event.target;\r\n\r\n    setFormData((prev) =>  ({...prev, [name]: value}));\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 2.md",
    "lang": "tsx",
    "code": "<div className=\"form-group\">\r\n    <label>Username:</label>\r\n    <input\r\n        style={{ width: \"40%\" }}\r\n        type=\"text\"\r\n        className=\"form-control\"\r\n        placeholder=\"Enter Name\"\r\n        name=\"username\"\r\n        autoComplete=\"off\"\r\n        onChange={setFormState}\r\n    />\r\n</div>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 2.md",
    "lang": "ts",
    "code": "const [username, setUsername] = useState<string>('');\r\n  const [password, setPassword] = useState<string>('');"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 2.md",
    "lang": "tsx",
    "code": "<div className=\"form-group\">\r\n    <label>Username:</label>\r\n    <input\r\n      style={{ width: '40%' }}\r\n      type=\"text\"\r\n      value={username}\r\n      onChange={(event) => setUsername(event.target.value)}\r\n      className=\"form-control\"\r\n      placeholder=\"Enter Name\"\r\n    />\r\n</div>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 2.md",
    "lang": "ts",
    "code": "const [formState, setFormState] = useState<State>({\r\n    email: \"\",\r\n    password: \"\",\r\n    message: \"\",\r\n    textStyle: \"\"\r\n});\r\n\r\nconst handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    if(formState.email == \"\" || formState.password == \"\") {\r\n        setFormState((prev) => ({...prev, message: \"All fields are mandatory\", textStyle: \"danger\"}));\r\n        return;\r\n    }\r\n\r\n    if(!validateEmail(formState.email)) {\r\n        setFormState((prev) => ({...prev, message: \"Invalid email\", textStyle: \"danger\"}));\r\n        return;\r\n    }\r\n\r\n    setFormState((prev) => ({...prev, message: \"Login success\", textStyle: \"success\"}));\r\n}\r\n\r\nconst handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const {name, value} = event.target;\r\n\r\n    setFormState((prev) => ({...prev, [name]: value, message: \"\"}));\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 2.md",
    "lang": "tsx",
    "code": "<form\r\n    style={{\r\n        position: \"relative\",\r\n        left: \"50px\",\r\n        width: \"40%\",\r\n        margin: \"auto\",\r\n        border: \"1px solid #ccc\",\r\n        padding: \"20px\",\r\n        borderRadius: \"5px\",\r\n        boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\r\n    }}\r\n    onSubmit={handleSubmit}\r\n>\r\n    <h3 style={{ textAlign: \"center\" }}>Login</h3>\r\n    <div style={{ marginBottom: \"15px\" }} className=\"form-group\">\r\n        <label>Email:</label>\r\n        <input\r\n            style={{ width: \"100%\", padding: \"10px\", boxSizing: \"border-box\" }}\r\n            className=\"form-control\"\r\n            name=\"email\"\r\n            type=\"text\"\r\n            onChange={handleChange}\r\n        />\r\n    </div>\r\n    <div style={{ marginBottom: \"15px\" }} className=\"form-group\">\r\n        <label>Password:</label>\r\n        <input\r\n            style={{ width: \"100%\", padding: \"10px\", boxSizing: \"border-box\" }}\r\n            className=\"form-control\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            onChange={handleChange}\r\n        />\r\n    </div>\r\n    {formState.message !== \"\" && (\r\n        <div\r\n            style={{ marginBottom: \"15px\" }}\r\n            className={`text text-${formState.textStyle}`}\r\n        >\r\n            {formState.message}\r\n        </div>\r\n    )}\r\n    <button\r\n        style={{\r\n            backgroundColor: \"#28a745\",\r\n            color: \"#fff\",\r\n            padding: \"10px 15px\",\r\n            border: \"none\",\r\n            borderRadius: \"3px\",\r\n            cursor: \"pointer\",\r\n        }}\r\n        className=\"btn btn-success\"\r\n    >\r\n        Login\r\n    </button>\r\n</form>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 2.md",
    "lang": "ts",
    "code": "const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if(event.key == \"Enter\"){\r\n        handleSubmit();\r\n    }\r\n    else{\r\n        console.log(\"Key pressed: \" + event.key);\r\n    }\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 2.md",
    "lang": "tsx",
    "code": "<div>\r\n    <h2>Search Form (Key-Events Demo)</h2>\r\n    <input\r\n        type=\"text\"\r\n        value={searchText}\r\n        onChange={(event) => setSearchText(event.target.value)}\r\n        onKeyPress={handleKeyPress} // <--\r\n        placeholder=\"Search...\"\r\n    />\r\n    <button onClick={handleSubmit}>Search</button>\r\n    <p>Search request sent for: {searchRequest}</p>\r\n</div>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 2.md",
    "lang": "ts",
    "code": "const usernameRef = useRef<HTMLInputElement>(null);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 2.md",
    "lang": "tsx",
    "code": "<input\r\n    type=\"text\"\r\n    ref={usernameRef} // <--\r\n    className=\"form-control\"\r\n    placeholder=\"Enter Name\"\r\n/>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 2.md",
    "lang": "ts",
    "code": "usernameRef.current?.value\r\n``\r\n\r\nCreate a `useRef` for a form to clear all the input fields in the form"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 2.md",
    "lang": "",
    "code": "Use `clear()` to clear all the refs the form uses"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 2.md",
    "lang": "",
    "code": ""
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 3.md",
    "lang": "shell",
    "code": "npm install redux react-redux redux-thunk"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 3.md",
    "lang": "shell",
    "code": "npm install -D @types/redux @types/react-redux @types/redux-thunk"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 3.md",
    "lang": "ts",
    "code": "import { configureStore } from '@reduxjs/toolkit';\r\n\r\nexport const store  = configureStore({\r\n    reducer: {}\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 3.md",
    "lang": "ts",
    "code": "import { Provider } from \"react-redux\";\r\nimport { store } from \"./store/store.ts\";\r\n\r\n  <Provider store={store}>\r\n\t  <App/>\r\n  </Provider>"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI React 3.md",
    "lang": "ts",
    "code": "const action = { type: \"ACTION_NAME\", payload: payload}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 1-Type-var-enum-array.md",
    "lang": "ts",
    "code": "let productId:number=1045;"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 1-Type-var-enum-array.md",
    "lang": "ts",
    "code": "function getProductDetails(productId: number): string{\r\n    return \"Product ID\"+productId;\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 1-Type-var-enum-array.md",
    "lang": "ts",
    "code": "let uName = \"Steve\"; // Even though the datatype of the variable uName is not specified here, but as\r\n// we have first assigned a string type value \"Steve\", so the Datatype of the variable uName is set to \"String\"\r\nuName =  87456 // throws an error \"Type '87451' is not assignable to type 'string'\"\r\nuName = \"John\" // the value of variable uName is assigned to \"John\""
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 1-Type-var-enum-array.md",
    "lang": "ts",
    "code": "if (true) {\r\n    console.log(var1); // undefined\r\n    var var1: number | undefined = 100;\r\n    console.log(var1); // 100\r\n}\r\n\r\nconsole.log(var1); //100"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 1-Type-var-enum-array.md",
    "lang": "ts",
    "code": "console.log(num);\r\nvar num: number|undefined = 20;\r\nconsole.log(num)"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 1-Type-var-enum-array.md",
    "lang": "ts",
    "code": "enum EnumName{property1,property2,property3};"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 1-Type-var-enum-array.md",
    "lang": "ts",
    "code": "enum MobilePrice{Black,Gold,White} ;"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 1-Type-var-enum-array.md",
    "lang": "ts",
    "code": "for (let i of nums) {\r\n    console.log(i);\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 1-Type-var-enum-array.md",
    "lang": "ts",
    "code": "let products:string[]=[\"Mobiles\",\"Tablets\"];\r\nproducts.push(\"Television\");\r\nproducts.push(\"Air Conditioners\");\r\n\r\n\r\nconsole.log(products) //[\"Mobiles\",\"Tablets\", \"Television\", \"Air conditioners\"]"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 1-Type-var-enum-array.md",
    "lang": "ts",
    "code": "let products:string[]=[\"Mobiles\",\"Tablets\"];\r\nproducts[2]=\"Television\";\r\nproducts[3]=\"Air Conditioners\";\r\n\r\nconsole.log(products) //[\"Mobiles\",\"Tablets\", \"Television\", \"Air conditioners\"]"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 1-Type-var-enum-array.md",
    "lang": "ts",
    "code": "let cssLib: string[] = [\"BS\", \"TCSS\", \"PR\"]\r\n\r\ncssLib[4] = \"vinayak\"\r\nconsole.log(cssLib) //[ 'BS', 'TCSS', 'PR', <2 empty items>, 'vinayak' ]"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 1-Type-var-enum-array.md",
    "lang": "ts",
    "code": "let nums = [0, 1, 2, 3, 4, 5, 6];\r\n\r\nconsole.log(nums.splice(2, 4)); //[ 2, 3, 4, 5 ]\r\nconsole.log(nums); //[ 0, 1, 6 ]"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 1-Type-var-enum-array.md",
    "lang": "ts",
    "code": "let nums: number[] = [0, 1, 2, 3, 4, 5, 6];\r\n\r\nnums.splice(2, 4, ...[5, 0, 0, 2]);\r\nconsole.log(nums); //  [0, 1, 5, 0, 0, 2, 6]"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 1-Type-var-enum-array.md",
    "lang": "ts",
    "code": "let  manufacturers:any[] = [\r\n    { \"id\": \"Samsung\", \"checked\": false },\r\n    { \"id\": \"Motorola\", \"checked\": false },\r\n    { \"id\": \"Apple\", \"checked\": false },\r\n    { \"id\": \"Sony\", \"checked\": false }\r\n];\r\n\r\nmanufacturers.forEach( function(manufacturer) {\r\n    console.log(manufacturer); // Prints all the elements\r\n});"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 1-Type-var-enum-array.md",
    "lang": "ts",
    "code": "manufacturers.map((e: string) => e.toUpperCase()); // returns a new [] with all caps manufacturers"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 1-Type-var-enum-array.md",
    "lang": "ts",
    "code": "console.log(manufacturers.filter(e => e.id.length > 5));"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 1-Type-var-enum-array.md",
    "lang": "ts",
    "code": "console.log(manufacturers.find(e => e.id.length > 5)); // returns   { id: 'Samsung', checked: false }"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 1-Type-var-enum-array.md",
    "lang": "ts",
    "code": "const allPositive = numbers.every((num) => num > 0);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 1-Type-var-enum-array.md",
    "lang": "ts",
    "code": "const anyPostive = numbers.some((num) => num > 0);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 2-params-class-static-abstract-interface-inheritance-modules.md",
    "lang": "ts",
    "code": "function getDetails(productName: string, productDescription?: number){\r\n    return\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 2-params-class-static-abstract-interface-inheritance-modules.md",
    "lang": "ts",
    "code": "function getDetails(productName: string=\"clothing\", productDescription?: number){\r\n    return\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 2-params-class-static-abstract-interface-inheritance-modules.md",
    "lang": "ts",
    "code": "function getDetails(...params: string[]){\r\n    return\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 2-params-class-static-abstract-interface-inheritance-modules.md",
    "lang": "ts",
    "code": "getDetails(...[\"clothing\", \"footware\", \"garments\"]);"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 2-params-class-static-abstract-interface-inheritance-modules.md",
    "lang": "ts",
    "code": "class Product {\r\n    productId: number | undefined;\r\n\r\n    getProductDetails(productId: number): string{\r\n        return \"Product id is: \" + productId.toString();\r\n    }\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 2-params-class-static-abstract-interface-inheritance-modules.md",
    "lang": "ts",
    "code": "class Product {\r\n    productId: number | undefined;\r\n\r\n    constructor (productId: number) {\r\n        this.productId = productId;\r\n    }\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 2-params-class-static-abstract-interface-inheritance-modules.md",
    "lang": "ts",
    "code": "class SpecialProduct {\r\n    constructor (private productId: string){}\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 2-params-class-static-abstract-interface-inheritance-modules.md",
    "lang": "ts",
    "code": "interface InterfaceName {\r\n    properties;\r\n    method declarations;\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 2-params-class-static-abstract-interface-inheritance-modules.md",
    "lang": "ts",
    "code": "interface Product {\r\n    productId: number;\r\n    productName: string;\r\n    getProductDetails(productId: number): string;\r\n    displayproductName: (productId: number)=>string;\r\n}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records UI TS 2-params-class-static-abstract-interface-inheritance-modules.md",
    "lang": "ts",
    "code": "interface Electronics {\r\n    name: string;\r\n}\r\n\r\nclass Laptop implements Electronics {\r\n    name: string;\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n    amount() {\r\n        console.log(\"48000\");\r\n    }\r\n}\r\n\r\nlet dell: Electronics = new Laptop(\"Laptop\");\r\ndell.amount(); // error"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix 0. Archive.md",
    "lang": "shell",
    "code": "cut -d '-' -f2 log.txt | cut -d '/' -f2 | sort -r | uniq -c"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix 0. Archive.md",
    "lang": "shell",
    "code": "cut -d ' ' -f1 log.txt | uniq -c | sort -r"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix 0. Archive.md",
    "lang": "shell",
    "code": "grep -F -f <(tail -n +2 fa.txt | cut -d'#' -f2 | uniq -d) fa.txt"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix 0. Archive.md",
    "lang": "shell",
    "code": "tail -n+2 fa.txt| sort -t'#' -k2,2nr -k4,4nr"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix 0. Archive.md",
    "lang": "shell",
    "code": "tail -n+2 fa.txt| sort -t'#' -k3n | head -n3 | tail -n1 | cut -d'#' -f1,3"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix 0. Archive.md",
    "lang": "bash",
    "code": "if [[ -e $1 && -n $(cat $1) ]]; then\r\n  echo \"File exists and Not empty\"\r\nfi"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix 0. Archive.md",
    "lang": "bash",
    "code": "# Define regex patterns\r\nemail_regex=\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"\r\nphone_regex=\"^[0-9]{10}$\"\r\nacc_regex=\"^[0-9]+$\"\r\n\r\n# Validate email ID\r\nif [[ ! $email_id =~ $email_regex ]]; then\r\n  echo \"The email ID you entered is wrong\"\r\nfi\r\n\r\n# Validate phone number\r\nif [[ ! $phone_number =~ $phone_regex ]]; then\r\n  echo \"The phone number you entered is wrong\"\r\nfi\r\n\r\n# Validate account number\r\nif [[ ! $acc_number =~ $acc_regex ]]; then\r\n  echo \"The account number you entered is wrong\"\r\nfi\r\n\r\n# Final message if all inputs are valid\r\nif [[ $email_id =~ $email_regex && $phone_number =~ $phone_regex && $acc_number =~ $acc_regex ]]; then\r\n  echo \"All inputs are valid.\"\r\nfi"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix Scripting.md",
    "lang": "bash",
    "code": "mix_array=(10 20 30 40 50 60 70 \"Infosys\" \"Limited\")"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix Scripting.md",
    "lang": "bash",
    "code": "echo ${mix_array[*]}\r\n#OR\r\necho ${mix_array[@]}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix Scripting.md",
    "lang": "bash",
    "code": "echo \"Length of the array is \"${#mix_array[*]}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix Scripting.md",
    "lang": "bash",
    "code": "echo \"Second Element is ${mix_array[1]}\""
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix Scripting.md",
    "lang": "bash",
    "code": "echo \"Length of Second Element is: \"${#mix_array[1]}"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix Scripting.md",
    "lang": "bash",
    "code": "sub_var=`ls -l`\r\n\r\n# Prints with space speration\r\necho $sub_var\r\n\r\n# Prints with new line speration\r\necho \"$sub_var\""
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix Scripting.md",
    "lang": "bash",
    "code": "if [ condition ];\r\nthen\r\n<statements>\r\nelif [ condition ];\r\nthen\r\n<statements>\r\nelse\r\n<statements>\r\nfi"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix Scripting.md",
    "lang": "bash",
    "code": "case variable in \r\noption 1) \r\n      statements to be executed if option 1 matches\r\n      ;;\r\nOption 2) \r\n      statements to be executed if option 2 matches\r\n      ;;\r\n*) \r\n      default statement\r\nesac"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix Scripting.md",
    "lang": "bash",
    "code": "for variable in <list>; do\r\n<statements>\r\ndone"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix Scripting.md",
    "lang": "bash",
    "code": "while [ condition ] ; do\r\n<statements>\r\ndone"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix Scripting.md",
    "lang": "bash",
    "code": "until [ condition ] ; do\r\n<statements>\r\ndone"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix Scripting.md",
    "lang": "bash",
    "code": "break [n]"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix Scripting.md",
    "lang": "bash",
    "code": "num2=`expr $num1 - 1`"
  },
  {
    "filePath": "C: Users srinivas.m13 Documents Punk_records Unix Scripting.md",
    "lang": "bash",
    "code": "num1=3\r\nwhile [ $num1 -gt 0 ]\r\ndo\r\n        num2=`expr $num1 - 1`\t# This is how calculations are done in Shell, using expr command #\r\n        while [ $num2 -gt 0 ]\r\n        do\r\n                echo \"Value of num1: $num1\"\r\n                echo \"Value of num2: $num2\"\r\n                num2=`expr $num2 - 1`\r\n        done\r\n        num1=`expr $num1 - 1`\r\ndone"
  }
]